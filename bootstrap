#!/bin/sh
#
# NAME
#    bootstrap -- initialize/update docker environment
#
# SYNOPSIS
#    bootstrap
#    bootstrap shellinit
#
# DESCRIPTION
#    Execute this script without parameters to build the local docker
#    environment.  Once bootstrapped, dependent services are running
#    via docker-compose and the environment variables are written to
#    *build/test-environment* for future use.
#
#    Running this script with the _shellinit_ command line parameter
#    causes it to simply interrogate the running docker environment,
#    update *build/test-environment*, and print the environment to
#    the standard output stream in a shell executable manner.  This
#    makes the following pattern for setting environment variables
#    in the current shell work.
#
#        prompt% $(./bootstrap shellinit)
#
# vim: set ts=2 sts=2 sw=2 et:
PROJECT=autocluster

if test -e /var/run/docker.sock
then
  DOCKER_IP=127.0.0.1
else
  docker-machine status ${PROJECT} > /dev/null 2>/dev/null
  RESULT=$?
  if [ ${RESULT} -ne 0 ]
  then
    docker-machine create --driver virtualbox ${PROJECT}
  fi
  eval $(docker-machine env ${PROJECT}) || {
    echo "Failed to initialize docker environment"
    exit 2
  }
  DOCKER_IP=$(docker-machine ip ${PROJECT})
fi

COMPOSE_ARGS="-p ${PROJECT}"

get_exposed_port() {
  docker-compose ${COMPOSE_ARGS} port $1 $2 | cut -d: -f2
}

build_env_file() {
  AMQP_PORT=$(get_exposed_port rabbitmq 5672)
  CONSUL_PORT=$(get_exposed_port consul 8500)
  (docker-machine env ${PROJECT} | sed 's/^\s*#.*$//' | sed '/^$/d'
   echo "export CONSUL_HOST=${DOCKER_IP}"
   echo "export CONSUL_HOST=${CONSUL_PORT}"
  ) > $1
}

set -e

mkdir -p build

if test "$1" = 'shellinit'
then
  # just build the environment file from docker containers
  cat build/test-environment
else
  # recreate the world!
  docker-compose ${COMPOSE_ARGS} stop
  docker-compose ${COMPOSE_ARGS} rm --force
  docker-compose ${COMPOSE_ARGS} up --allow-insecure-ssl -d
  build_env_file build/test-environment
fi
cat build/test-environment
